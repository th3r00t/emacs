#+TITLE: Emacs Dotfiles Of Raelon "th3r00t" Masters
#+AUTHOR: Raelon "th3r00t" Masters
#+EMAIL: admin@mylt.dev
https://orgmode.org/manual/Initial-visibility.html
#+STARTUP: overview
#+begin_src emacs-lisp
  (setq evil-want-keybinding nil)
#+end_src
* Emacs Configuration
** 1. Notes
https://orgmode.org/manual/Structure-Templates.html
Insert Source Block C-c C-,
*** To Be Installed
org-journal
emacs application framework
mu4e
projectile
*** Things to map
magit
kill ring
ag
** 2. Load Paths
#+begin_src emacs-lisp
  (add-to-list 'load-path "/usr/share/emacs/site-lisp")
  (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
#+end_src
** Early Init
#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 100 1024 1024)
        read-process-output-max (* 1024 1024)
        company-idle-delay 0.0
        company-minimum-prefix-length 1
        create-lockfiles nil) ;; lock files will kill `npm start'
  (setq explicit-shell-file-name "zsh")
  (setq shell-file-name "zsh")
  (setq explicit-zsh-args '("--login" "--interactive"))
  (defun zsh-shell-mode-setup ()
    (setq-local comint-process-echoes t))
  (add-hook 'shell-mode-hook #'zsh-shell-mode-setup)
#+end_src

| zsh-shell-mode-setup |

** 3. Evil Mode
https://github.com/emacs-evil/evil-collection
https://github.com/cofi/evil-leader
#+begin_src emacs-lisp
  (setq evil-want-keybinding nil)
  (use-package evil-leader
    :ensure t
    :config
    (global-evil-leader-mode t)
    (evil-leader/set-leader ","))
  (use-package evil-surround :ensure t :config (global-evil-surround-mode))
  (use-package evil-indent-textobject :ensure t)
  (use-package evil-org :ensure t :config (evil-org-set-key-theme '(textobjects insert navigation additional shift todo heading))
    (add-hook 'org-mode-hook (lambda () (evil-org-mode))))
  (use-package powerline-evil :ensure t :config (powerline-evil-vim-color-theme))
  (use-package evil :ensure t :config (evil-mode 1))
  (use-package evil-collection :after evil :ensure t :config (evil-collection-init))
  (setq evil-want-fine-undo t)
  (advice-add 'undo-auto--last-boundary-amalgamating-number :override #'ignore)
#+end_src
** 5. Org Mode Configs
*** General
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\.org$" . org-mode))
  (global-set-key (kbd "C-c ;") 'org-store-link)
  (global-set-key (kbd "C-c b") 'org-iswitchb)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
  (add-hook 'org-mode-hook 'org-indent-mode)
  (setq org-src-tab-acts-natively t)
#+end_src
*todo keywords*
#+begin_src emacs-lisp
  (setq org-todo-keywords
        '(
          (sequence "TODO" "FEEDBACK" "VERIFY" "|" "DONE" "DELEGATED")
          (sequence "BUG" "IN-PROCESSS" "VERIFY" "|" "DONE" "DELEGATED")
          ))
#+end_src
*custom faces*
#+begin_src emacs-lisp
  (custom-theme-set-faces
   'user
   '(org-block ((t (:inherit fixed-pitch))))
   '(org-code ((t (:inherit (shadow fixed-pitch)))))
   '(org-document-info ((t (:foreground "dark orange"))))
   '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
   '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
   '(org-link ((t (:foreground "royal blue" :underline t))))
   '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-property-value ((t (:inherit fixed-pitch))) t)
   '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
   '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 1.0))))
   '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))
#+end_src
*hide emphasis markers*
#+begin_src emacs-lisp
  (setq org-hide-emphasis-markers t)
#+end_src
*substitute list markers*
#+begin_src emacs-lisp
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "â€¢"))))))
#+end_src
*variable pitch*
#+begin_src emacs-lisp
  ;; (let* ((variable-tuple
  ;;         (cond ((x-list-fonts "ETBembo")         '(:font "ETBembo"))
  ;;               ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
  ;;               ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
  ;;               ((x-list-fonts "Verdana")         '(:font "Verdana"))
  ;;               ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
  ;;               (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
  ;;        (base-font-color     (face-foreground 'default nil 'default))
  ;;        (headline           `(:inherit default :weight bold :foreground ,base-font-color)))

  ;;   (custom-theme-set-faces
  ;;    'user
  ;;    `(org-level-8 ((t (,@headline ,@variable-tuple))))
  ;;    `(org-level-7 ((t (,@headline ,@variable-tuple))))
  ;;    `(org-level-6 ((t (,@headline ,@variable-tuple))))
  ;;    `(org-level-5 ((t (,@headline ,@variable-tuple))))
  ;;    `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.18))))
  ;;    `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.25))))
  ;;    `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.4))))
  ;;    `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.45))))
  ;;    `(org-document-title ((t (,@headline ,@variable-tuple :height 1.6 :underline nil))))))
  (custom-theme-set-faces
   'user
   '(variable-pitch ((t (:family "ETBembo" :height 155 :weight thin))))
   '(fixed-pitch ((t ( :family "Fira Code Retina" :height 155)))))
  (add-hook 'org-mode-hook 'variable-pitch-mode)
  (add-hook 'org-mode-hook 'visual-line-mode)
#+end_src

*** Org-Babel
#+begin_src emacs-lisp
  (require 'ob-js)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t) (C . t) (shell . t) (sql . t) (emacs-lisp . t) (sqlite . t) (R . t) (lisp . t)))
  (add-to-list 'org-babel-tangle-lang-exts '("js" . "js"))
#+end_src
#+begin_src emacs-lisp
  (use-package ox-gfm
    :ensure t)
#+end_src


*** Org-Roam
https://www.orgroam.com/manual.html#Getting-Started
**** install
#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :demand t
    :config
    (setq org-roam-directory (file-truename "~/org/.org-roam"))
    (org-roam-db-autosync-mode))
#+end_src
**** config
#+begin_src emacs-lisp
  (add-to-list 'display-buffer-alist
               '("\\*org-roam\\*"
                 (display-buffer-in-side-window)
                 (side . right)
                 (slot . 0)
                 (window-width . 0.33)
                 (window-parameters . ((no-other-window . t)
                                       (no-delete-other-windows . t)))))
  (setq org-roam-dailies-directory "daily/")

  (setq org-roam-dailies-capture-templates
        '(("d" "default" entry
           "* %?"
           :target (file+head "%<%Y-%m-%d>.org"
                              "#+title: %<%Y-%m-%d>\n"))))

  (require 'org-roam-export)

  (use-package deft
    :after org
    :bind
    ("C-c n d" . deft)
    :custom
    (deft-recursive t)
    (deft-use-filter-string-for-filename t)
    (deft-default-extension "org")
    (deft-directory org-roam-directory))
  (use-package org-roam-ui
    :straight
    (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
    :after org-roam
    ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
    ;;         a hookable mode anymore, you're advised to pick something yourself
    ;;         if you don't care about startup time, use
    ;;  :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src

: t

*** Hydra
**** use-package
#+begin_src emacs-lisp
  (use-package hydra :ensure t :config (require 'hydra))
#+end_src

*** Org-Projectile
**** use-package
#+begin_src emacs-lisp
  (use-package org-projectile
    :config
    (progn
      (setq org-projectile-projects-file "/home/th3r00t/org/projects.org")
      (setq org-agenda-files (append org-agenda-files (org-projectile-todo-files)))
      (setq org-projectile-per-project-filepath "project.org")
      ;; (setq org-agenda-files (append org-agenda-files (org-projectile-todo-files)))
      (global-set-key (kbd "C-c c") 'org-capture)
      (global-set-key (kbd "C-c t") 'org-projectile-project-todo-completing-read)
      (global-set-key (kbd "C-c T") 'my/org-projectile-goto-project-file)
      (defun my/org-projectile-todo-files ()
        "Fetch a list of org TODO files for projects that actually exist."
        (seq-filter #'file-exists-p (org-projectile-todo-files)))
      ;; Add org-projectile files to org.
      (setq org-agenda-files (append org-agenda-files (my/org-projectile-todo-files)))
      (push (org-projectile-project-todo-entry) org-capture-templates))
    :ensure t
    )
#+end_src

*** Org-Evil
**** use-package
#+begin_src emacs-lisp
  (use-package evil-org
    :ensure t
    :after org
    :hook (org-mode . (lambda () evil-org-mode))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
  (evil-leader/set-key-for-mode 'org-mode
    "." 'hydra-org-state/body
    "t" 'org-todo
    "T" 'org-show-todo-tree
    "v" 'org-mark-element
    "a" 'org-agenda
    "c" 'org-archive-subtree
    "l" 'evil-org-open-links
    "C" 'org-resolve-clocks)
  (defhydra hydra-org-state ()
    ;; basic navigation
    ("i" org-cycle)
    ("I" org-shifttab)
    ("h" org-up-element)
    ("l" org-down-element)
    ("j" org-forward-element)
    ("k" org-backward-element)
    ;; navigating links
    ("n" org-next-link)
    ("p" org-previous-link)
    ("o" org-open-at-point)
    ;; navigation blocks
    ("N" org-next-block)
    ("P" org-previous-block)
    ;; updates
    ("." org-ctrl-c-ctrl-c)
    ("*" org-ctrl-c-star)
    ("-" org-ctrl-c-minus)
    ;; change todo state
    ("H" org-shiftleft)
    ("L" org-shiftright)
    ("J" org-shiftdown)
    ("K" org-shiftup)
    ("t" org-todo))
#+end_src
*** Org-Journal
**** use-package
#+begin_src emacs-lisp
  (use-package org-journal :ensure t :init (setq org-journal-prefix-key "C-c j "))
  (setq org-journal-dir "~/org/journal/")
  (setq org-journal-date-format "%A, %d %B %Y")
  (setq org-journal-enable-agenda-integration t)
  (require 'org-journal)
#+end_src
*** Org-Crypt
#+begin_src emacs-lisp
  (require 'org-crypt)
  (org-crypt-use-before-save-magic)
  (setq org-tags-exclude-from-inheritance '("crypt"))

  (setq org-crypt-key "D59F9D29BC865B11B4DAF5EF16F20F2A769CF74C")
  ;; GPG key to use for encryption
  ;; Either the Key ID or set to nil to use symmetric encryption.

  (setq auto-save-default nil)
  ;; Auto-saving does not cooperate with org-crypt.el: so you need to
  ;; turn it off if you plan to use org-crypt.el quite often.  Otherwise,
  ;; you'll get an (annoying) message each time you start Org.

  ;; To turn it off only locally, you can insert this:
  ;;
  ;; # -*- buffer-auto-save-file-name: nil; -*-
#+end_src
*** Org Protocol
#+begin_src emacs-lisp
  (require 'org-roam-protocol)
  (setq org-roam-ref-capture-templates
        '(("r" "ref" plain (function org-roam--capture-get-point)
           "%?"
           :file-name "websites/${slug}"
           :head "#+SETUPFILE:./browser.org
  ,#+ROAM_KEY: ${ref}
  ,#+HUGO_SLUG: ${slug}
  ,#+TITLE: ${title}

  - source :: ${ref}"
           :unnarrowed t)))
#+end_src
*** Capture Templates
**** Journal
#+begin_src emacs-lisp
  (defun org-journal-find-location ()
    ;; Open today's journal, but specify a non-nil prefix argument in order to
    ;; inhibit inserting the heading; org-capture will insert the heading.
    (org-journal-new-entry t)
    (unless (eq org-journal-file-type 'daily)
      (org-narrow-to-subtree))
    (goto-char (point-max)))

  (setq org-capture-templates '(("j" "Journal entry" plain (function org-journal-find-location)
                                 "** %(format-time-string org-journal-time-format)%^{Title}\n%i%?"
                                 :jump-to-captured t :immediate-finish t)))
#+end_src
**** Org roam capture
#+begin_src emacs-lisp
  (setq org-roam-capture-templates
        '(("d" "default" plain
           "%?"
           :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n")
           :unnarrowed t)
          ("l" "programming language" plain
           "* Characteristics\n\n- Family: %?\n- Inspired by: \n\n* Reference:\n\n"
           :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
           :unnarrowed t)

          ("b" "book notes" plain
           "\n* Source\n\nAuthor: %^{Author}\nTitle: ${title}\nYear: %^{Year}\n\n* Summary\n\n%?"
           :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
           :unnarrowed t)

          ("p" "project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
           :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: project")
           :unnarrowed t)
          ("t" "TODO" plain "* TODO %?\nDEADLINE: <%(org-read-date nil nil \"+2d\")>"
           :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: project")
           :unnarrowed t)
          ("c" "Configuration File" plain "#+PROPERTY:\theader-args\t:tangle ~/.config/%?\n* Install\n/add any required installations here./\n#+begin_src sh\t:tangle no\n\t\n#+end_src\n* Configuration\n/add your configuration here./\n#+begin_src sh\n\t\n#+end_src\n%U"
           :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: project")
           :unnarrowed t)
          ))
#+end_src

| d | default | plain | %? | :if-new | (file+head %<%Y%m%d%H%M%S>-${slug}.org #+title: ${title} |

***** Future Capture
#+begin_src emacs-lisp

#+end_src
*** Org-Bullets
#+begin_src emacs-lisp
  (use-package org-bullets :ensure t)
  (require 'org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

| (lambda nil (org-bullets-mode 1)) | org-indent-mode | evil-collection-mu4e-org-set-header-to-normal-mode | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | #<subr F616e6f6e796d6f75732d6c616d626461_anonymous_lambda_4> | (lambda nil evil-org-mode) | (lambda nil (evil-org-mode)) | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-fold-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |
*** Org-Roam w\ Agenda
#+begin_src emacs-lisp
  (defun vulpea-project-p ()
    "Return non-nil if current buffer has any todo entry.

  TODO entries marked as done are ignored, meaning the this
  function returns nil if current buffer contains only completed
  tasks."
    (seq-find                                 ; (3)
     (lambda (type)
       (eq type 'todo))
     (org-element-map                         ; (2)
         (org-element-parse-buffer 'headline) ; (1)
         'headline
       (lambda (h)
         (org-element-property :todo-type h)))))

  (defun vulpea-project-update-tag ()
    "Update PROJECT tag in the current buffer."
    (when (and (not (active-minibuffer-window))
               (vulpea-buffer-p))
      (save-excursion
        (goto-char (point-min))
        (let* ((tags (vulpea-buffer-tags-get))
               (original-tags tags))
          (if (vulpea-project-p)
              (setq tags (cons "project" tags))
            (setq tags (remove "project" tags)))

          ;; cleanup duplicates
          (setq tags (seq-uniq tags))

          ;; update tags if changed
          (when (or (seq-difference tags original-tags)
                    (seq-difference original-tags tags))
            (apply #'vulpea-buffer-tags-set tags))))))

  (defun vulpea-buffer-p ()
    "Return non-nil if the currently visited buffer is a note."
    (and buffer-file-name
         (string-prefix-p
          (expand-file-name (file-name-as-directory org-roam-directory))
          (file-name-directory buffer-file-name))))

  (defun vulpea-project-files ()
    "Return a list of note files containing 'project' tag." ;
    (seq-uniq
     (seq-map
      #'car
      (org-roam-db-query
       [:select [nodes:file]
                :from tags
                :left-join nodes
                :on (= tags:node-id nodes:id)
                :where (like tag (quote "%\"project\"%"))]))))

  (defun vulpea-agenda-files-update (&rest _)
    "Update the value of `org-agenda-files'."
    (setq org-agenda-files (vulpea-project-files)))

  (add-hook 'find-file-hook #'vulpea-project-update-tag)
  (add-hook 'before-save-hook #'vulpea-project-update-tag)

  (advice-add 'org-agenda :before #'vulpea-agenda-files-update)
  (advice-add 'org-todo-list :before #'vulpea-agenda-files-update)

  ;; functions borrowed from `vulpea' library
  ;; https://github.com/d12frosted/vulpea/blob/6a735c34f1f64e1f70da77989e9ce8da7864e5ff/vulpea-buffer.el

  (defun vulpea-buffer-tags-get ()
    "Return filetags value in current buffer."
    (vulpea-buffer-prop-get-list "filetags" "[ :]"))

  (defun vulpea-buffer-tags-set (&rest tags)
    "Set TAGS in current buffer.

  If filetags value is already set, replace it."
    (if tags
        (vulpea-buffer-prop-set
         "filetags" (concat ":" (string-join tags ":") ":"))
      (vulpea-buffer-prop-remove "filetags")))

  (defun vulpea-buffer-tags-add (tag)
    "Add a TAG to filetags in current buffer."
    (let* ((tags (vulpea-buffer-tags-get))
           (tags (append tags (list tag))))
      (apply #'vulpea-buffer-tags-set tags)))

  (defun vulpea-buffer-tags-remove (tag)
    "Remove a TAG from filetags in current buffer."
    (let* ((tags (vulpea-buffer-tags-get))
           (tags (delete tag tags)))
      (apply #'vulpea-buffer-tags-set tags)))

  (defun vulpea-buffer-prop-set (name value)
    "Set a file property called NAME to VALUE in buffer file.
  If the property is already set, replace its value."
    (setq name (downcase name))
    (org-with-point-at 1
      (let ((case-fold-search t))
        (if (re-search-forward (concat "^#\\+" name ":\\(.*\\)")
                               (point-max) t)
            (replace-match (concat "#+" name ": " value) 'fixedcase)
          (while (and (not (eobp))
                      (looking-at "^[#:]"))
            (if (save-excursion (end-of-line) (eobp))
                (progn
                  (end-of-line)
                  (insert "\n"))
              (forward-line)
              (beginning-of-line)))
          (insert "#+" name ": " value "\n")))))

  (defun vulpea-buffer-prop-set-list (name values &optional separators)
    "Set a file property called NAME to VALUES in current buffer.
  VALUES are quoted and combined into single string using
  `combine-and-quote-strings'.
  If SEPARATORS is non-nil, it should be a regular expression
  matching text that separates, but is not part of, the substrings.
  If nil it defaults to `split-string-default-separators', normally
  \"[ \f\t\n\r\v]+\", and OMIT-NULLS is forced to t.
  If the property is already set, replace its value."
    (vulpea-buffer-prop-set
     name (combine-and-quote-strings values separators)))

  (defun vulpea-buffer-prop-get (name)
    "Get a buffer property called NAME as a string."
    (org-with-point-at 1
      (when (re-search-forward (concat "^#\\+" name ": \\(.*\\)")
                               (point-max) t)
        (buffer-substring-no-properties
         (match-beginning 1)
         (match-end 1)))))

  (defun vulpea-buffer-prop-get-list (name &optional separators)
    "Get a buffer property NAME as a list using SEPARATORS.
  If SEPARATORS is non-nil, it should be a regular expression
  matching text that separates, but is not part of, the substrings.
  If nil it defaults to `split-string-default-separators', normally
  \"[ \f\t\n\r\v]+\", and OMIT-NULLS is forced to t."
    (let ((value (vulpea-buffer-prop-get name)))
      (when (and value (not (string-empty-p value)))
        (split-string-and-unquote value separators))))

  (defun vulpea-buffer-prop-remove (name)
    "Remove a buffer property called NAME."
    (org-with-point-at 1
      (when (re-search-forward (concat "\\(^#\\+" name ":.*\n?\\)")
                               (point-max) t)
        (replace-match ""))))
#+end_src

: vulpea-buffer-prop-remove

*** Calendar With Org
#+begin_src emacs-lisp
  (use-package calfw :ensure t)
  (use-package calfw-org :ensure t)
  (use-package calfw-ical :ensure t)
  (require 'calfw)
  (require 'calfw-org)
  (require 'calfw-ical)
#+end_src

#+begin_src emacs-lisp
  (setq cfw:org-agenda-schedule-args '(:timestamp))
  (setq cfw:org-overwrite-default-keybinding t)
#+end_src
#+begin_src emacs-lisp
  (defun my/open-calendar ()
    (interactive)
    (cfw:open-calendar-buffer
     :contents-sources
     (list
      (cfw:org-create-source "Green")  ; orgmode source
      (cfw:ical-create-source "gcal" "https://calendar.google.com/calendar/ical/myoung0083%40gmail.com/private-9afcd7a82aa7dee05fb9311f2178a2fc/basic.ics" "IndianRed") ; google calendar ICS
      )))
#+end_src

: my-open-calendar
*** Org-Roam-Timestamps
#+begin_src emacs-lisp
  (use-package org-roam-timestamps
    :after org-roam
    :config (org-roam-timestamps-mode))
#+end_src
#+begin_src emacs-lisp
  (setq org-roam-timestamps-parent-file t)
#+end_src

** 7. Ui Configurations
Configuration settings that adjust the user experience
*** Font
#+begin_src emacs_lisp
#+end_src
*** Window systems -- remove visual cruft
#+begin_src emacs-lisp
  (tooltip-mode 1)
  (tool-bar-mode -1)
  (menu-bar-mode 1)
  (scroll-bar-mode -1)
#+end_src
*** Line Numebers
#+begin_src emacs-lisp
  (global-display-line-numbers-mode)
#+end_src
*** Highlight Line
#+begin_src emacs-lisp
  (global-hl-line-mode 1)
#+end_src
*** AutoPairs
#+begin_src emacs-lisp
  (electric-pair-mode)
#+end_src
*** Rainbow Delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t :init (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src
*** Rainbow Colors
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :config (rainbow-mode 1))
#+end_src
*** Evil Mode
https://github.com/emacs-evil/evil-collection
https://github.com/cofi/evil-leader
#+begin_src emacs-lisp
  (setq evil-want-keybinding nil)
  (use-package evil-leader
    :ensure t
    :config
    (global-evil-leader-mode t)
    (evil-leader/set-leader ","))
  (use-package evil-surround :ensure t :config (global-evil-surround-mode))
  (use-package evil-indent-textobject :ensure t)
  (use-package evil-org :ensure t :config (evil-org-set-key-theme '(textobjects insert navigation additional shift todo heading))
    (add-hook 'org-mode-hook (lambda () (evil-org-mode))))
  (use-package powerline-evil :ensure t :config (powerline-evil-vim-color-theme))
  (use-package evil :ensure t :config (evil-mode 1))
  (use-package evil-collection :after evil :ensure t :config (evil-collection-init))
  (setq evil-want-fine-undo t)
  (advice-add 'undo-auto--last-boundary-amalgamating-number :override #'ignore)
#+end_src
**** use gv to reselect visual selection after actions
*** Theming
#+begin_src emacs-lisp
  (use-package helm-themes
    :ensure t)
  (use-package all-the-icons
    :ensure t)
  (use-package all-the-icons-ivy-rich
    :ensure t)
  (use-package all-the-icons-ivy
    :ensure t)
  (use-package all-the-icons-ibuffer
    :ensure t)
  (use-package all-the-icons-gnus
    :ensure t)
  (use-package all-the-icons-dired
    :ensure t)
  (use-package all-the-icons-completion
    :ensure t)
  (use-package treemacs-all-the-icons
    :ensure t)
  (use-package spaceline-all-the-icons
    :ensure t)
  (use-package theme-magic
    :ensure t)
  (use-package afternoon-theme
    :ensure t)
  (use-package ample-theme
    :init (progn (load-theme 'ample t t)
                 (load-theme 'ample-flat t t)
                 (load-theme 'ample-light t t)
                 )
    :defer t
    :ensure t)
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-nord t)

    ;; ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config)
    )
#+end_src
**** Enable Theme
#+begin_src emacs-lisp
  (load-theme 'doom-tokyo-night t)
#+end_src
*** Modeline
**** Space Line
***** Documentation
[[https://github.com/TheBB/spaceline]]
***** Install
#+begin_src emacs-lisp
  (use-package spaceline :ensure t :config (require 'spaceline-config) :init (spaceline-spacemacs-theme))
  (use-package eyebrowse :ensure t :config (eyebrowse-mode t))
#+end_src

: t

***** Configuration
#+begin_src emacs-lisp
  (spaceline-compile
                                          ; left side
    '(((persp-name
        workspace-number
        window-number)
       :fallback evil-state
       :face highlight-face
       :priority 100)
      (anzu :priority 95)
      auto-compile
      ((buffer-modified buffer-size buffer-id remote-host)
       :priority 98)
      (major-mode :priority 79)
      (process :when active)
      ((flycheck-error flycheck-warning flycheck-info)
       :when active
       :priority 89)
      (minor-modes :when active
                   :priority 9)
      (mu4e-alert-segment :when active)
      (erc-track :when active)
      (version-control :when active
                       :priority 78)
      (org-pomodoro :when active)
      (org-clock :when active)
      nyan-cat)
                                          ; right side
    '(which-function
      (python-pyvenv :fallback python-pyenv)
      (purpose :priority 94)
      (battery)
      (selection-info :priority 95)
      input-method
      ((buffer-encoding-abbrev
        point-position
        line-column)
       :separator " | "
       :priority 96)
      (global :when active)
      (buffer-position :priority 99)
      (hud :priority 99)
      (date :priority 78)
      (eyebrowse-mode :priority 78)
      ))
#+end_src

**** Fancy Battery
#+begin_src emacs-lisp
  (use-package fancy-battery :ensure t)
  (add-hook 'after-init-hook #'fancy-battery-mode)
#+end_src

*** Emacs Startup
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    ;; (linum-mode -1)
    (dashboard-setup-startup-hook)
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
    (setq dashboard-items '((recents  . 5)
                            (bookmarks . 5)
                            (projects . 5)
                            (agenda . 5)
                            (registers . 5)))
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-set-navigator t)
    (setq dashboard-set-init-info t)
    (setq dashboard-week-agenda t)
    (setq dashboard-center-content nil)
    (setq dashboard-banner-logo-title "We Do Not Forgive\nWe Do Not Forget\nExpect Us.")
    (setq dashboard-startup-banner "~/.emacs.d/legion_transparent.png")
    ;; Value can be
    ;; 'official which displays the official emacs logo
    ;; 'logo which displays an alternative emacs logo
    ;; 1, 2 or 3 which displays one of the text banners
    ;; "path/to/your/image.gif", "path/to/your/image.png" or "path/to/your/text.txt"
    )
#+end_src
*** iBuffer
#+begin_src emacs-lisp
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("dired" (mode . dired-mode))
                 ("perl" (mode . cperl-mode))
                 ("erc" (mode . erc-mode))
                 ("planner" (or
                             (name . "^\\*Calendar\\*$")
                             (name . "^diary$")
                             (mode . muse-mode)))
                 ("emacs" (or
                           (name . "^\\*scratch\\*$")
                           (name . "^\\*Messages\\*$")))
                 ("svg" (name . "\\.svg")) ; group by file extension
                 ("gnus" (or
                          (mode . message-mode)
                          (mode . bbdb-mode)
                          (mode . mail-mode)
                          (mode . gnus-group-mode)
                          (mode . gnus-summary-mode)
                          (mode . gnus-article-mode)
                          (name . "^\\.bbdb$")
                          (name . "^\\.newsrc-dribble")))))))
  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-switch-to-saved-filter-groups "default")))
  (defadvice ibuffer-update-title-and-summary (after remove-column-titles)
    (save-excursion
      (with-current-buffer "*Ibuffer*")
      (read-only-mode 0)
      (goto-char 1)
      (search-forward "-\n" nil t)
      (delete-region 1 (point))
      (let ((window-min-height 1))
        ;; save a little screen estate
        (shrink-window-if-larger-than-buffer))
      (read-only-mode 1)))

  (ad-activate 'ibuffer-update-title-and-summary)
  (use-package ibuffer-vc :ensure t)
  (use-package ibuffer-sidebar :ensure t)
  (use-package ibuffer-tramp :ensure t)
  (use-package ibuffer-projectile :ensure t)
#+end_src
*** Dired
#+begin_src emacs-lisp
  (use-package dired-sidebar
    :ensure t
    )
#+end_src
*** Fill Column
**** install
#+begin_src emacs-lisp
  (use-package fill-column-indicator :ensure t
    :init (require 'fill-column-indicator)
    )
#+end_src
**** TODO configuration
#+begin_src emacs-lisp
  (setq fci-rule-width 4)
  (setq fci-rule-color "darkblue")
  (add-hook 'prog-mode-hook #'fci-mode)
#+end_src
*** Beacon
#+begin_src emacs-lisp
  (use-package beacon :ensure t)
  (beacon-mode 1)
#+end_src
*** Perspective
#+begin_src emacs-lisp
  (use-package perspective
    :bind
    ("C-x C-b" . persp-list-buffers)         ; or use a nicer switcher, see below
    ("C-x b" . persp-switch-to-buffer*)
    ("C-x k" . persp-kill-buffer*)
    :custom
    (persp-mode-prefix-key (kbd "C-c M-p"))  ; pick your own prefix key here
    :init
    (persp-mode))
#+end_src
- Automatic perspective saving and loading
  #+begin_src emacs-lisp :tangle no
    (use-package persp-mode-projectile-bridge
      :after (persp-mode projectile)
      :config
      (persp-mode-projectile-bridge-mode +1))
  #+end_src
*** Dimmer
#+begin_src emacs-lisp
  (use-package dimmer
    :ensure t
    :config
  (dimmer-configure-which-key)
  (dimmer-configure-helm)
        (dimmer-configure-magit)
        (dimmer-configure-org)
        (dimmer-configure-hydra)
        (dimmer-configure-gnus)
  (dimmer-mode t))
#+end_src

: t
*** Transparency
#+begin_src emacs-lisp :tangle no
  (set-frame-parameter (selected-frame) 'alpha '(85 . 75))
  (add-to-list 'default-frame-alist '(alpha . (85 . 75)))
  (set-frame-parameter nil 'alpha nil)
#+end_src


** General Configurations
*** Default Overrides
**** yes-no
#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
*** Use-Package Configuration
#+begin_src emacs-lisp
  (setq use-package-always-ensure t)
#+end_src
*** Bakup Files
#+begin_src emacs-lisp
  (setq
   backup-by-copying t      ; don't clobber symlinks
   backup-directory-alist
   '(("." . "~/.saves"))    ; don't litter my fs tree
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t)       ; use versioned backups
#+end_src
*** Save Last Position
#+begin_src emacs-lisp
  (setq save-place-file "~/.emacs.d/saveplace")
  (setq-default save-place t)
#+end_src
*** Remote Editing
**** Tramp Mode
https://www.emacswiki.org/emacs/TrampMode
#+begin_src emacs-lip
  (setq tramp-default-method "ssh")
#+end_src
*** Follow Symlinks
#+begin_src emacs-lisp
  (setq find-file-visit-truename t)
#+end_src
*** Folding
#+begin_src emacs-lisp
  ;;(use-package origami :ensure t :config (require 'origami) :init (setq global-origami-mode 't))
  (add-hook 'prog-mode-hook #'hs-minor-mode)
  ;;(add-hook 'prog-mode-hook (lambda () (evil-close-folds)))
#+end_src

*** Undo
#+begin_src emacs-lisp
  (use-package undo-tree :ensure t)
  (global-undo-tree-mode)
#+end_src


*** Multiple Cursors
#+begin_src emacs-lisp
  (use-package multiple-cursors :ensure t)
#+end_src
*** Restart Emacs
#+begin_src emacs-lisp
  (use-package restart-emacs :ensure t)
#+end_src
*** SLIME
#+begin_src emacs-lisp
  ;; (load (expand-file-name "~/.roswell/helper.el"))
  (use-package slime :ensure t)
  (setq inferior-lisp-program "ros -Q run")
#+end_src

: sbcl
*** Tabs Size
#+begin_src emacs-lisp
  (setq-default tab-width 4)
  (setq-default indent-tabs-mode nil)
#+end_src
** Registers
#+begin_src emacs-lisp
  (set-register ?e (cons 'file "~/.emacs.d/"))
  (set-register ?z (cons 'file "~/.zshrc"))
  (set-register ?x (cons 'file "~/.xinitrc"))
  (set-register ?p (cons 'file "~/postinstall.sh"))
#+end_src
** File Management
*** Neotree
**** install
#+begin_src emacs-lisp
  (use-package neotree :ensure t)
#+end_src
** Project Management
*** Projectile
https://projectile.mx/
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-mode t))
  (use-package helm-projectile
    :ensure t)
#+end_src
*** Magit
https://magit.vc/
#+begin_src emacs-lisp
  (use-package magit :ensure t)
  (setq magit-define-global-key-bindings 't)
#+end_src
** Development Plugins (General)
*** Indent Handling
#+begin_src emacs-lisp
  ;;(use-package auto-indent-mode
  ;;    :ensure t)
  ;;(auto-indent-global-mode)
  (electric-indent-mode 1)
  ;;; Indentation for python

  ;; Ignoring electric indentation
  (defun electric-indent-ignore-python (char)
    "Ignore electric indentation for python-mode"
    ;; (if (equal major-mode 'python-mode)
    ;;     'no-indent
    ;;   nil))
    ;; (add-hook 'electric-indent-functions 'electric-indent-ignore-python)

  ;; Enter key executes newline-and-indent
  (defun set-newline-and-indent ()
    "Map the return key with `newline-and-indent'"
    (local-set-key (kbd "RET") 'newline-and-indent))
  (add-hook 'python-mode-hook 'set-newline-and-indent)
  (dolist (command '(yank yank-pop))
    (eval `(defadvice ,command (after indent-region activate)
             (and (not current-prefix-arg)
                  (member major-mode '(emacs-lisp-mode lisp-mode
                                                       clojure-mode    scheme-mode
                                                       haskell-mode    ruby-mode
                                                       rspec-mode      python-mode
                                                       c-mode          c++-mode
                                                       objc-mode       latex-mode
                                                       ))
                  (let ((mark-even-if-inactive transient-mark-mode))
                    (indent-region (region-beginning) (region-end) nil))))))
#+end_src


#+begin_src emacs-lisp
  (use-package highlight-indent-guides :ensure t
    :hook((prog-mode . highlight-indent-guides-mode)))
#+end_src

*** Lsp
**** Install
#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    :init
    (setq lsp-keymap-prefix "C-c l")
    :hook(
          (prog-mode . lsp-deferred)
          (lsp-mode . lsp-enable-which-key-integration)
          )
    :commands lsp)
  (use-package lsp-ui :commands lsp-ui-mode :ensure t)
#+end_src
**** Configure
#+begin_src emacs-lisp
  (setq lsp-ui-sideline-show-diagnostics 1)
  (setq lsp-ui-sideline-show-hover t)
  (setq lsp-ui-sideline-show-code-actions t)
  (setq lsp-ui-peek-enable t)
  (setq lsp-ui-peek-show-directory t)
  (setq lsp-ui-doc-enable t)
  (setq lsp-ui-doc-show-with-cursor t)
  (setq lsp-lens-enable t)
  (setq lsp-headerline-breadcrumb-enable t)
  (setq lsp-conpletion-enable t)
  (setq lsp-completion-provider :capf)
  (setq lsp-completion-show-detail t)
  (setq lsp-completion-show-kind t)
  (setq lsp-enable-snippet t)
  (setq lsp-rust-analyzer-cargo-watch-command "clippy")
  (setq lsp-eldoc-render-all t)
  (setq lsp-idle-delay 0.6)
  ;; enable / disable the hints as you prefer:
  (setq lsp-rust-analyzer-server-display-inlay-hints t)
  (setq lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
  (setq lsp-rust-analyzer-display-chaining-hints t)
  (setq lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil)
  (setq lsp-rust-analyzer-display-closure-return-type-hints t)
  (setq lsp-rust-analyzer-display-parameter-hints nil)
  (setq lsp-rust-analyzer-display-reborrow-hints nil)
#+end_src

: (standard-value (nil) custom-type hook custom-package-version (lsp-mode . 7.0.1) variable-documentation Hooks to run after `nix' server is run. custom-requests nil)

*** DAP
**** Install
#+begin_src emacs-lisp
  (use-package dap-mode
    :ensure t)
#+end_src
**** Configuration
#+begin_src emacs-lisp
  (use-package dap-mode
    :after lsp-mode
    :commands dap-debug
    :hook ((python-mode . dap-ui-mode) (python-mode . dap-mode))
    :config
    (require 'dap-python)
    (require 'dap-cpptools)
    (setq dap-python-debugger 'debugpy)
    (add-hook 'dap-stopped-hook
              (lambda (arg) (call-interactively #'dap-hydra))))
  (with-eval-after-load 'dap-cpptools
    ;; Add a template specific for debugging Rust programs.
    ;; It is used for new projects, where I can M-x dap-edit-debug-template
    (dap-register-debug-template "Rust::CppTools Run Configuration"
                                 (list :type "cppdbg"
                                       :request "launch"
                                       :name "Rust::Run"
                                       :MIMode "gdb"
                                       :miDebuggerPath "rust-gdb"
                                       :environment []
                                       :program "${workspaceFolder}/target/debug/hello / replace with binary"
                                       :cwd "${workspaceFolder}"
                                       :console "external"
                                       :dap-compilation "cargo build"
                                       :dap-compilation-dir "${workspaceFolder}")))

  (with-eval-after-load 'dap-mode
    (setq dap-default-terminal-kind "integrated") ;; Make sure that terminal programs open a term for I/O in an Emacs buffer
    (dap-auto-configure-mode +1))
#+end_src

#+begin_src emacs-lisp
  (dap-mode 1)
  (dap-ui-mode 1)
  (dap-tooltip-mode 1)
  (dap-ui-controls-mode 1)
#+end_src
*** Cmake
#+begin_src emacs-lisp
  (use-package cmake-project
    :ensure t)
  (defun maybe-cmake-project-mode ()
    (if (or (file-exists-p "CMakeLists.txt")
            (file-exists-p (expand-file-name "CMakeLists.txt" (car (project-roots (project-current))))))
        (cmake-project-mode)))

  (add-hook 'c-mode-hook 'maybe-cmake-project-mode)
  (add-hook 'c++-mode-hook 'maybe-cmake-project-mode)
#+end_src
*** FlyMake
#+begin_src emacs-lisp
  (use-package flymake
    :ensure t)
#+end_src
*** Flycheck
#+begin_src emacs-lisp
  (use-package flycheck :ensure t :init (global-flycheck-mode t))
#+end_src
*** VDiff
#+begin_src emacs-lisp
  (use-package vdiff :ensure t :config (require 'vdiff) (define-key vdiff-mode-map (kbd "C-x") vdiff-mode-prefix-map))
#+end_src

: t

*** Xml
#+begin_src emacs-lisp
  (use-package xml-format :ensure t :demand t :after nxml-mode)
#+end_src
*** YaS Snippets
#+begin_src emacs-lisp
  (use-package yasnippet :ensure t :init (require 'yasnippet) :config (yas-global-mode 1))
  (use-package yasnippet-snippets :ensure t)
  (defun yas-popup-isearch-prompt (prompt choices &optional display-fn)
  (when (featurep 'popup)
    (popup-menu*
     (mapcar
      (lambda (choice)
        (popup-make-item
         (or (and display-fn (funcall display-fn choice))
             choice)
         :value choice))
      choices)
     :prompt prompt
     ;; start isearch mode immediately
     :isearch t
     )))

(setq yas-prompt-functions '(yas-popup-isearch-prompt yas-maybe-ido-prompt yas-completing-prompt yas-no-prompt))
#+end_src

| yas-popup-isearch-prompt | yas-maybe-ido-prompt | yas-completing-prompt | yas-no-prompt |

*** Doom Snippets
#+begin_src emacs-lisp
  (use-package doom-snippets
    :after yasnippet
    :straight (doom-snippets :type git :host github :repo "hlissner/doom-snippets" :files ("*.el" "*")))
#+end_src
*** Verb Rest Client
#+begin_src emacs-lisp
  (use-package verb :ensure t)
  (with-eval-after-load 'org
    (define-key org-mode-map (kbd "C-c C-r") verb-command-map))
#+end_src
*** Git Gutter
#+begin_src emacs-lisp
  (use-package git-gutter
    :ensure t
    :hook (prog-mode . git-gutter-mode)
    :config
    (global-git-gutter-mode +1)
    (setq git-gutter:update-interval 0.02)
    )
  (use-package git-gutter-fringe
    :ensure t)
  (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
  (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
  (define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom)

#+end_src

: git-gutter-fr:deleted

** Development Plugins (Languages)
*** Godot Script
https://github.com/godotengine/emacs-gdscript-mode
https://langroudi.co.uk/post/emacs_godot_csharp/
#+begin_src emacs-lisp
  (use-package gdscript-mode
    :ensure t
    :straight (gdscript-mode
               :type git
               :host github
               :repo "godotengine/emacs-gdscript-mode"))
  (setq gdscript-godot-executable "/usr/bin/godot-mono")
#+end_src
**** Supress unknown notifications
#+begin_src emacs-lisp
  (defun lsp--gdscript-ignore-errors (original-function &rest args)
    "Ignore the error message resulting from Godot not replying to the `JSONRPC' request."
    (if (string-equal major-mode "gdscript-mode")
        (let ((json-data (nth 0 args)))
          (if (and (string= (gethash "jsonrpc" json-data "") "2.0")
                   (not (gethash "id" json-data nil))
                   (not (gethash "method" json-data nil)))
              nil ; (message "Method not found")
            (apply original-function args)))
      (apply original-function args)))
  ;; Runs the function `lsp--gdscript-ignore-errors` around `lsp--get-message-type` to suppress unknown notification errors.
  (advice-add #'lsp--get-message-type :around #'lsp--gdscript-ignore-errors)
#+end_src
*** Csharp
#+begin_src emacs-lisp
  (use-package tree-sitter :ensure t)
  (use-package tree-sitter-langs :ensure t)
  (use-package tree-sitter-indent :ensure t)

  (use-package csharp-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.cs\\'" . csharp-tree-sitter-mode)))
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)

#+end_src
*** C++
#+begin_src emacs-lisp
  (use-package yasnippet-snippets :ensure t :config (require 'yasnippet)(yas-global-mode 1))
  (use-package modern-cpp-font-lock :ensure t)
  (use-package cmake-ide :ensure t :config (cmake-ide-setup))
  (use-package cpputils-cmake :ensure t)
  (add-hook 'c-mode-common-hook
            (lambda ()
              (if (derived-mode-p 'c-mode 'c++-mode)
                  (cppcm-reload-all)
                )))
  ;; OPTIONAL, somebody reported that they can use this package with Fortran
  (add-hook 'c90-mode-hook (lambda () (cppcm-reload-all)))
  ;; OPTIONAL, avoid typing full path when starting gdb
  (global-set-key (kbd "C-c C-g")
                  '(lambda ()(interactive) (gud-gdb (concat "gdb --fullname " (cppcm-get-exe-path-current-buffer)))))
  ;; OPTIONAL, some users need specify extra flags forwarded to compiler
  (setq cppcm-extra-preprocss-flags-from-user '("-I/usr/src/linux/include" "-DNDEBUG"))
#+end_src
*** Python
using pyenv install which ever version of python you wish to use for development. Set it as the local env for the folder you are working in and pip install -r requirements.txt into that env.
Then in emacs M-x pyenv-mode-set from within the project you are editing.
M-x lsp-restart-workspace
- With pyls:
  #+begin_src sh :tangle no
    pip install python-language-server flake8 pyls-black(optional) pyls-isort(optional)
  #+end_src
- With pyright
  #+begin_src sh :tangle no
    sudo npm install -g pyright && pip install flake8 black(optional)
  #+end_src
NOTE: these hooks runs in reverse order
#+begin_src emacs-lisp
  (use-package eglot :ensure t)
  (use-package lsp-pyright
    :after lsp-mode
    :custom
    (lsp-pyright-auto-import-completions nil)
    (lsp-pyright-typechecking-mode "off")
    )
  (use-package python
    :straight (:type built-in)
    :init
    (add-to-list 'all-the-icons-icon-alist
                 '("\\.py$" all-the-icons-alltheicon "python" :height 1 :face all-the-icons-dblue))
    :custom
    (python-shell-interpreter "ipython")
    (python-shell-interpreter-args "-i --simple-prompt")
    (python-indent-guess-indent-offset-verbose t)
    :bind
    ( :map python-mode-map
      ("C-c r" . python-indent-shift-right)
      ("C-c l" . python-indent-shift-left))
    :hook
    (python-mode . (lambda () (setq-local company-prescient-sort-length-enable nil)))
    (python-mode . (lambda () (unless (and buffer-file-name (file-in-directory-p buffer-file-name "~/.local/share/virtualenvs/"))
                                (flycheck-mode))))
    ;;(python-mode . lsp-deferred)
    (python-mode . (lambda () (fk/add-local-hook 'before-save-hook 'eglot-format-buffer)))
    (python-mode . eglot-ensure)
    ;; importmagic runs ~100mb ipython process per python file, and it does not
    ;; always find imports, 60%-70% maybe. I stop using this, but still want to keep.
    ;; (python-mode . importmagic-mode)
    ;; (python-mode . fk/activate-pyvenv)
    (python-mode . (lambda ()
                     (when (and (buffer-file-name)
                                (string=
                                 (car (last (f-split (f-parent (buffer-file-name)))))
                                 "tests"))
                       )))
    (python-mode . (lambda () (setq-local fill-column 88)))
    :config
    (defvar python-walrus-operator-regexp ":=")

    ;; Make walrus operator ":=" more visible
    (font-lock-add-keywords
     'python-mode
     `((,python-walrus-operator-regexp 0 'escape-glyph t))
     'set))
  (use-package blacken
    :commands blacken-mode blacken-buffer)
  (use-package py-isort
    :commands py-isort-buffer)

#+end_src

*** Web-mode
#+begin_src emacs-lisp
  (use-package web-mode :ensure t)
  (require 'web-mode)
  (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.jsx?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tsx?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.scss\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.less\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.json\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.js\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.ts\\'" . web-mode))

#+end_src

*** Vue js
#+begin_src emacs-lisp
  ;; (use-package vue-mode :ensure t)
  ;; (use-package vue-htm-mode :ensure t)
#+end_src
*** sass
#+begin_src emacs-lisp
#+end_src
*** Rust
#+begin_src emacs-lisp
  (use-package rustic :ensure t)
  (defun rustic-mode-auto-save-hook ()
    "Enable auto-saving in rustic-mode buffers."
    (when buffer-file-name
      (setq-local compilation-ask-about-save nil)))
  (add-hook 'rustic-mode-hook 'rustic-mode-auto-save-hook)
  (use-package cargo-mode
    :config
    (add-hook 'rust-mode-hook 'cargo-minor-mode))
  (setq rustic-rustfmt-args "+nightly")
  (setq rustic-rustfmt-config-alist '((hard_tabs . t) (skip_children . nil)))
  (setq rustic-lsp-server 'rust-analyzer)
  ;; (setq rustic-lsp-client 'eglot)
  (setq rustic-analyzer-command '("~/.cargo/bin/rust-analyzer"))
#+end_src
*** Haskell
- Nix dependant configuration to allow finding the correct env.
#+begin_src emacs-lisp :tangle no
  (setq haskell-process-wrapper-function
        (lambda (args) (apply 'nix-shell-command (nix-current-sandbox) args)))
#+end_src
*** TinTIn
#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/tintin-mode")
  (require 'tintin-mode)
#+end_src
** Completion System
*** Pop-up
#+begin_src emacs-lisp
  (use-package popup
    :ensure t)
  (use-package popup-complete
    :ensure t)
#+end_src
*** Autocomplete
#+begin_src emacs-lisp
  (use-package auto-complete
    :ensure t)
  (use-package auto-complete-clang-async
    :ensure t)
  (use-package auto-complete-exuberant-ctags
    :ensure t)
  (use-package auto-complete-c-headers
    :ensure t)
  (require 'auto-complete)
  (require 'auto-complete-config)
  (ac-config-default)
#+end_src
*** Company
https://company-mode.github.io/
**** Install
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :config
    (add-hook 'after-init-hook 'global-company-mode)
    )
  (use-package company-c-headers :ensure t)
                                          ;(use-package company-gtags :ensure t)
                                          ;(use-package company-elisp :ensure t)
#+end_src
**** Configure
#+begin_src emacs-lisp

  (setq company-backends (delete 'company-semantic company-backends))
  (define-key c-mode-map  [(tab)] 'company-complete)
  (define-key c++-mode-map  [(tab)] 'company-complete)
  (add-to-list 'company-backends 'company-c-headers)
  (add-to-list 'company-c-headers-path-system "/usr/include/c++/12.1.1/")
  (add-to-list 'company-backends 'company-nixos-options)
#+end_src
*** Ivy
#+begin_src emacs-lisp
  (use-package ivy :ensure t)
#+end_src
*** Helm
https://github.com/emacs-helm/helm/wiki
http://tuhdo.github.io/helm-intro.html
https://github.com/thierryvolpiatto/emacs-config/blob/main/init-helm.el
**** Install
#+begin_src emacs-lisp
  (use-package helm
    :ensure t
    :straight t
    :config
    (helm-mode 1)
    :init
    (require 'helm)
    ;; (require 'helm-config)
    )
  (use-package helm-lsp :commands helm-lsp-workspace-symbol :ensure t)
  (define-key lsp-mode-map [remap xref-find-apropos] #'helm-lsp-workspace-symbol)
#+end_src

**** Configure
***** Helm General
#+begin_src emacs-lisp
  ;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
  ;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
  ;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
  (global-set-key (kbd "M-x") #'helm-M-x)
  (global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
  (global-set-key (kbd "C-x C-f") #'helm-find-files)
  (global-set-key (kbd "C-c h") 'helm-command-prefix)
  (global-unset-key (kbd "C-x c"))
  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
  (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB work in terminal
  (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z
  (setq helm-M-x-fuzzy-match t)
  ;;(setq helm-display-function 'helm-display-buffer-in-own-frame helm-display-buffer-reuse-frame t)
  (setq helm-input-idle-delay                     0.01
        helm-reuse-last-window-split-state        nil
        helm-always-two-windows                   t
        helm-split-window-inside-p                t
        helm-commands-using-frame                 '(completion-at-point helm-apropos helm-eshell-prompts helm-imenu helm-imenu-in-all-buffers)
        helm-actions-inherit-frame-settings       t
        helm-use-frame-when-more-than-two-windows nil
        helm-use-frame-when-dedicated-window      nil
        helm-frame-background-color               "DarkSlateGray"
        helm-show-action-window-other-window      'left
        helm-allow-mouse                          t
        helm-move-to-line-cycle-in-source         t
        helm-autoresize-max-height                40 ; it is %.
        helm-autoresize-min-height                20 ; it is %.
        helm-autoresize-mode 1
        helm-debug-root-directory                 "/home/th3r00t/tmp/helm-debug"
        helm-follow-mode-persistent               t
        helm-candidate-number-limit               500
        helm-visible-mark-prefix                  "âœ“"
        helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
        helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
        helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
        helm-ff-file-name-history-use-recentf t
        helm-echo-input-in-header-line t)
  (when (executable-find "curl") (setq helm-google-suggest-use-curl-p t))
#+end_src
***** Helm Gtags
#+begin_src emacs-lisp
  (use-package helm :ensure t)
  (use-package helm-gtags :ensure t)
  (setq
   helm-gtags-ignore-case t
   helm-gtags-auto-update t
   helm-gtags-use-input-at-cursor t
   helm-gtags-pulse-at-cursor t
   helm-gtags-prefix-key "\C-cg"
   helm-gtags-suggested-key-mapping t
   )

  (require 'helm-gtags)
  ;; Enable helm-gtags-mode
  (add-hook 'dired-mode-hook 'helm-gtags-mode)
  (add-hook 'eshell-mode-hook 'helm-gtags-mode)
  (add-hook 'c-mode-hook 'helm-gtags-mode)
  (add-hook 'c++-mode-hook 'helm-gtags-mode)
  (add-hook 'asm-mode-hook 'helm-gtags-mode)

  (define-key helm-gtags-mode-map (kbd "C-c g a") 'helm-gtags-tags-in-this-function)
  (define-key helm-gtags-mode-map (kbd "C-j") 'helm-gtags-select)
  (define-key helm-gtags-mode-map (kbd "M-.") 'helm-gtags-dwim)
  (define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack)
  (define-key helm-gtags-mode-map (kbd "C-c <") 'helm-gtags-previous-history)
  (define-key helm-gtags-mode-map (kbd "C-c >") 'helm-gtags-next-history)
#+end_src
**** Helm Silver Searcher
https://github.com/emacsorphanage/helm-ag
#+begin_src emacs-lisp
  (use-package helm-ag
    :ensure t
    )
#+end_src
*** Speedbar
#+begin_src emacs-lisp
  (use-package sr-speedbar :ensure t)
#+end_src

** Key Bindings
*** Which Key
https://github.com/justbur/emacs-which-key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
  ;; (which-key-setup-side-window-right)
  (which-key-setup-side-window-right-bottom)
  (setq which-key-side-window-max-width 0.50)
#+end_src
*** Macros
**** Execute a shell command and insert return
#+begin_src emacs-lisp
  (fset 'exec2point
        (kmacro-lambda-form [?\C-u ?\M-! ?\C-x ?q return] 0 "%d"))
#+end_src
*** Bindings
https://shom.dev/posts/20211122_emacs-which-key-prefix-labels/
#+begin_src emacs-lisp
  ;; Resize windows
  (global-set-key (kbd "A-<down>") 'enlarge-window)
  (global-set-key (kbd "A-<up>") 'shrink-window)
  (global-set-key (kbd "A-<left>") 'enlarge-window-horizontally)
  (global-set-key (kbd "A-<right>") 'shrink-window-horizontally)
  (global-set-key (kbd "C-c n") '("Org Roam" . (keymap)))
  (global-set-key (kbd "C-c n l") 'org-roam-buffer-toggle)
  (global-set-key (kbd "C-c n f") 'org-roam-node-find)
  (global-set-key (kbd "C-c n i") 'org-roam-node-insert)
  (global-set-key (kbd "C-c n I") 'org-roam-node-insert-immediate)
  (global-set-key (kbd "C-c n c") 'org-roam-capture)
  (global-set-key (kbd "C-c n C") 'org-capture)
  (global-set-key (kbd "C-c C-S-n") 'helm-nixos-options)
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c n j") 'org-journal-new-entry)
  (global-set-key (kbd "C-c o") 'helm-occur)
  (global-set-key (kbd "C-;") '("Emacs Ops" . (keymap)))
  (global-set-key (kbd "C-; ;") 'exec2point)
  (global-set-key (kbd "C-; t") '("Toggles" . (keymap)))
  ;; (global-set-key (kbd "C-; t t") '("Vterm" . vterm))
  (global-set-key (kbd "C-; t T") 'helm-top-in-frame)
  (global-set-key (kbd "C-; m") '("Media" . (keymap)))
  (global-set-key (kbd "C-; m p") 'emms-metaplaylist-mode-go)
  (global-set-key (kbd "C-; m h") 'helm-emms)
  (global-set-key (kbd "C-; m s") 'emms-stop)
  (global-set-key (kbd "C-; m S") 'emms-start)
  (global-set-key (kbd "C-; d") 'insert-date)
  (global-set-key (kbd "C-; e") '("ERC" . (keymap)))
  (global-set-key (kbd "C-; e a") '("Select Active Buffer" . erc-track-switch-buffer))
  (global-set-key (kbd "C-; e b") '("Select Buffer" . erc-switch-to-buffer))
  (global-set-key (kbd "C-; e c") '("Connect" . (keymap)))
  (global-set-key (kbd "C-; e c a") '("irc.anonops.com" . t3/irc/anon))
  (global-set-key (kbd "C-; e c f") '("irc.freenode.net" . t3/irc/freenode))
  ;; (global-set-key (kbd "M-`") 'shell-pop)
  (global-set-key (kbd "M-`") 'vterm-toggle)
  (define-key yas-minor-mode-map (kbd "C-SPC") yas-maybe-expand)
  (evil-leader/set-key
    "b" '("Buffers" . (keymap))
    "b b" '("Buffer List" . helm-buffers-list)
    "b n" '("Next Buffer" . next-buffer)
    "b p" '("Previous Buffer" . previous-buffer)
    "b e" 'eval-buffer
    "b k" '("Kill Buffer" . kill-buffer)
    "d" '("Develop" . (keymap))
    "d d" '("Dap Debugger" . dap-debug)
    "d h" '("Dap Hydra" . dap-hydra)
    "d b" '("Toggle Breakpoint" . dap-breakpoint-toggle)
    "d r" '("Dap Repl" . dap-ui-repl)
    "f" '("Files" . (keymap))
    "f f" '("Find Files" . helm-find-files)
    "f s" '("Sudo Find" . sudo-find-file)
    "k k" '("Kill Ring" . helm-show-kill-ring)
    "t" '("Toggles" . (keymap))
    "t f" '("Toggle Neotree" . neotree-toggle)
    "t t" '("Toggle term" . shell-pop)
    "t T" '("Toggle Bar" . tool-bar-mode)
    "t M" '("Toggle Menu" . menu-bar-mode)
    "t s" '("Toggle Symbols" . lsp-treemacs-symbols)
    "t n" '("Toggle linum" . linum-mode)
    "o" '("Org" . (keymap))
    "o t" '("Org TODO" . todo-show)
    "p" '("Projects" . (keymap))
    "p a" '("Add Project" . projectile-add-known-project)
    "p h" '("Helm Projectile" . helm-projectile)
    "p p" '("Projectile Commands" . projectile-command-map)
    "q" '("Emacs Ops" . (keymap))
    "q f" '("Frames" . (keymap))
    "q f f" '("Make Frame" . make-frame)
    "q f q" '("Delete Frame" . delete-frame)
    "q q" '("Quit" . evil-quit)
    "q r" '("Reload Config" . reload-config)
    "q R" '("Restart Emacs" . restart-emacs)
    "r" '("Registers" . (keymap))
    "r r" '("Helm Registers" . helm-register)
    "TAB" '("Tabs" . (keymap))
    "TAB TAB" '("New Tab" . tab-new)
    "TAB n" '("Next Tab" . tab-next)
    "TAB p" '("Previous Tab" . tab-previous)
    "TAB l" '("Tab List" . tab-list)
    "T" '("Theming" . (keymap))
    "T x" '("Them From Emacs" . theme-magic-from-emacs)
    "T T" '("Helm Themes" . helm-themes)
    "d x w" 'delete-trailing-whitespace)
#+end_src


** Help System
*** DevDocs
#+begin_src emacs-lisp
  (use-package devdocs :ensure t
    :config
    (global-set-key (kbd "C-h C-l") '("Dev Docs"))
    (global-set-key (kbd "C-h C-l i") #'("Install Docs" . devdocs-install))
    (global-set-key (kbd "C-h C-l d") #'("Delete Docs" . devdocs-delete))
    (global-set-key (kbd "C-h C-l u") #'("Update Docs" . devdocs-update-all))
    (global-set-key (kbd "C-h C-l l") #'("Lookup Docs" . devdocs-lookup))
    (global-set-key (kbd "C-h C-l p") #'("Peruse Docs" . devdocs-peruse))
    )
#+end_src
*** Helpfull
https://github.com/Wilfred/helpful
#+begin_src emacs-lisp
  (use-package helpful
    :ensure t
    :config
    (global-set-key (kbd "C-h f") #'helpful-callable)
    (global-set-key (kbd "C-h v") #'helpful-variable)
    (global-set-key (kbd "C-h k") #'helpful-key)
    (global-set-key (kbd "C-c C-.") #'helpful-at-point)
    (global-set-key (kbd "C-h F") #'helpful-function)
    (global-set-key (kbd "C-h C") #'helpful-command))
#+end_src
** Terminal
*** libvterm
https://github.com/akermu/emacs-libvterm
#+begin_src emacs-lisp
  (use-package vterm
    :ensure t)
#+end_src
*** vterm-toggle
https://github.com/kitnil/emacs-vterm-toggle
#+begin_src emacs-lisp
  (use-package vterm-toggle
    :ensure t)
#+end_src


**** Show buffer in bottom side
#+begin_src emacs-lisp
  (setq vterm-toggle-fullscreen-p nil)
  (add-to-list 'display-buffer-alist
               '("^v?term.*"
                 (display-buffer-reuse-window display-buffer-at-bottom)
                 ;;(display-buffer-reuse-window display-buffer-in-direction)
                 ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                 (direction . bottom)
                 (dedicated . t) ;dedicated is supported in emacs27
                 (reusable-frames . visible)
                 (window-height . 0.15)))
#+end_src

*** shell-pop-el
#+begin_src emacs-lisp
  (use-package shell-pop :ensure t)
#+end_src


** MU4E
#+begin_src emacs-lisp
  (require 'mu4e)
#+end_src
*** Multiple Account Configuration
#+begin_src emacs-lisp
  ;; assumed Maildir layout
  ;; ~/Maildir/Account0/{Inbox,Sent,Trash}
  ;; ~/Maildir/Account1/{Inbox,Sent,Trash}
  ;; where Account0 is context name
  (defun my-make-mu4e-context (context-name full-name mail-address signature)
    "Return a mu4e context named CONTEXT-NAME with :match-func matching
  folder name CONTEXT-NAME in Maildir. The context's `user-mail-address',
  `user-full-name' and `mu4e-compose-signature' is set to MAIL-ADDRESS
  FULL-NAME and SIGNATURE respectively.
  Special folders are set to context specific folders."
    (let ((dir-name (concat "/" context-name)))
      (make-mu4e-context
       :name context-name
       ;; we match based on the maildir of the message
       ;; this matches maildir /Arkham and its sub-directories
       :match-func
       `(lambda (msg)
          (when msg
            (string-match-p
             ,(concat "^" dir-name)
             (mu4e-message-field msg :maildir))))
       :vars
       `((user-mail-address    . ,mail-address)
         (user-full-name       . ,full-name)
         (mu4e-sent-folder     . ,(concat dir-name "/Sent"))
         (mu4e-drafts-folder   . ,(concat dir-name "/Drafts"))
         (mu4e-trash-folder    . ,(concat dir-name "/Trash"))
         (mu4e-refile-folder   . ,(concat dir-name "/Archive"))
         (mu4e-compose-signature . ,signature)))))
  ;;Fixing duplicate UID errors when using mbsync and mu4e
  (setq mu4e-change-filenames-when-moving t)
  (setq mu4e-contexts
        `(,(my-make-mu4e-context
            "admin" "Raelon 'th3r00t' Masters" "admin@mylt.dev" "<a href=home.mylt.dev>th3r00t</a>"
            )))
#+end_src
*** mbsync integration
#+begin_src emacs-lisp
  (setq mu4e-get-mail-command "mbsync -a")
  ;; Most of the time, I merely want mu4e to re-index my local maildir (because
  ;; I'm running mbsync as a cron job). However, sometimes I want to fetch mails
  ;; immediately. Do this by changing the meaning of a prefix for
  ;; mu4e-update-mail-and-index (bound to "U").
  ;;
  ;; A prefix usually means run in the background, but I don't think I ever want
  ;; that. Change things so a prefix means to call mbsync.
  (defun my/mu4e-update-mail-and-index (orig-fun prefix &rest args)
    (interactive "P")
    (if prefix (funcall orig-fun nil) (mu4e-update-index)))
  (advice-add 'mu4e-update-mail-and-index
              :around #'my/mu4e-update-mail-and-index)
  ;;Fixing duplicate UID errors when using mbsync and mu4e
  (setq mu4e-change-filenames-when-moving t)
#+end_src

*** mu4e-alert
#+begin_src emacs-lisp
  (use-package mu4e-alert
    :ensure t
    :after mu4e
    :init
    (setq mu4e-alert-interesting-mail-query
          (concat
           "flag:unread maildir:/admin@mylt.dev/inbox "
           ))
    (mu4e-alert-enable-mode-line-display)
    (defun gjstein-refresh-mu4e-alert-mode-line ()
      (interactive)
      (mu4e-kill-update-mail)
      (mu4e-alert-enable-mode-line-display)
      )
    (run-with-timer 0 60 'gjstein-refresh-mu4e-alert-mode-line)
    )
#+end_src
Alert for multiple email accounts
#+begin_src emacs-lisp
  (setq mu4e-alert-interesting-mail-query
    (concat
     "flag:unread maildir:/admin@mylt.dev/inbox "
     "or "
     "flag:unread maildir:/gmail/inbox"
     ))
#+end_src
*** sending mail
#+begin_src emacs-lisp
  ;; I have my "default" parameters from Gmail
  (setq mu4e-sent-folder "/home/th3r00t/.local/share/mail/admin/Sent"
        ;; mu4e-sent-messages-behavior 'delete ;; Unsure how this should be configured
        mu4e-drafts-folder "/home/th3r00t/.local/share/mail/admin/Drafts"
        user-mail-address "admin@mylt.dev"
        smtpmail-default-smtp-server "smtp.office365.com"
        smtpmail-smtp-server "smtp.office365.com"
        smtpmail-smtp-service 587)

  ;; Now I set a list of
  (defvar my-mu4e-account-alist
    '(("Admin"
       (mu4e-sent-folder "/admin/Sent")
       (user-mail-address "admin@mylt.dev")
       (smtpmail-smtp-user "admin@mylt.dev")
       (smtpmail-local-domain "mylt.dev")
       (smtpmail-default-smtp-server "smtp.office365.com")
       (smtpmail-smtp-server "smtp.office365.com")
       (smtpmail-smtp-service 587)
       )
      ;; Include any other accounts here ...
      ))

  (defun my-mu4e-set-account ()
    "Set the account for composing a message.
     This function is taken from:
       https://www.djcbsoftware.nl/code/mu/mu4e/Multiple-accounts.html"
    (let* ((account
            (if mu4e-compose-parent-message
                (let ((maildir (mu4e-message-field mu4e-compose-parent-message :maildir)))
                  (string-match "/\\(.*?\\)/" maildir)
                  (match-string 1 maildir))
              (completing-read (format "Compose with account: (%s) "
                                       (mapconcat #'(lambda (var) (car var))
                                                  my-mu4e-account-alist "/"))
                               (mapcar #'(lambda (var) (car var)) my-mu4e-account-alist)
                               nil t nil nil (caar my-mu4e-account-alist))))
           (account-vars (cdr (assoc account my-mu4e-account-alist))))
      (if account-vars
          (mapc #'(lambda (var)
                    (set (car var) (cadr var)))
                account-vars)
        (error "No email account found"))))
  (add-hook 'mu4e-compose-pre-hook 'my-mu4e-set-account)
#+end_src
*** Avoid trash on delete
#+begin_src emacs-lisp
  (defun remove-nth-element (nth list)
  (if (zerop nth) (cdr list)
    (let ((last (nthcdr (1- nth) list)))
      (setcdr last (cddr last))
      list)))
(setq mu4e-marks (remove-nth-element 5 mu4e-marks))
(add-to-list 'mu4e-marks
     '(trash
       :char ("d" . "â–¼")
       :prompt "dtrash"
       :dyn-target (lambda (target msg) (mu4e-get-trash-folder msg))
       :action (lambda (docid msg target)
                 (mu4e~proc-move docid
                    (mu4e~mark-check-target target) "-N"))))
#+end_src
*** Random Tweaks
#+begin_src emacs-lisp
  ;; This allows me to use 'helm' to select mailboxes
  (setq mu4e-completing-read-function 'completing-read)
  ;; Why would I want to leave my message open after I've sent it?
  (setq message-kill-buffer-on-exit t)
  ;; Don't ask for a 'context' upon opening mu4e
  (setq mu4e-context-policy 'pick-first)
  ;; Don't ask to quit... why is this the default?
  (setq mu4e-confirm-quit nil)
#+end_src

** Reddit
(use-package md4rd :ensure t
:config
(add-hook 'md4rd-mode-hook 'md4rd-indent-all-the-lines)
(setq md4rd-subs-active '(emacs lisp+Common_Lisp prolog clojure))
(setq md4rd--oauth-access-token
"dK7qKMb50RaIIYLYi_tM2tKMZ5Be7g")
(setq md4rd--oauth-refresh-token
"dK7qKMb50RaIIYLYi_tM2tKMZ5Be7g")
(run-with-timer 0 3540 'md4rd-refresh-login))

** Emacs Application Framework*** Install
#+begin_src emacs-lisp :tangle no
  (use-package eaf
    :load-path "~/.emacs.d/site-lisp/emacs-application-framework"
    :custom
                                          ; See https://github.com/emacs-eaf/emacs-application-framework/wiki/Customization
    (eaf-browser-continue-where-left-off t)
    (eaf-browser-enable-adblocker t)
    (browse-url-browser-function 'eaf-open-browser)
    :config
    (defalias 'browse-web #'eaf-open-browser)
    (eaf-bind-key scroll_up "C-n" eaf-pdf-viewer-keybinding)
    (eaf-bind-key scroll_down "C-p" eaf-pdf-viewer-keybinding)
    (eaf-bind-key take_photo "p" eaf-camera-keybinding)
    (eaf-bind-key nil "M-q" eaf-browser-keybinding)) ;; unbind, see more in the Wiki
#+end_src

: t

*** Configuration
(require 'eaf-browser)
** Music
*** EMMS
**** install
#+begin_src emacs-lisp
  (use-package emms :ensure t)
  (require 'emms-setup)
  (emms-all)
  (emms-default-players)
  ;; notifications
  ;; covers
  (setq emms-browser-covers #'emms-browser-cache-thumbnail-async)
  (setq emms-browser-thumbnail-small-size 64)
  (setq emms-browser-thumbnail-medium-size 128)
  ;; filters
  (emms-browser-make-filter "all" #'ignore)
  (emms-browser-make-filter "recent"
                            (lambda (track) (< 30
                                               (time-to-number-of-days
                                                (time-subtract (current-time)
                                                               (emms-info-track-file-mtime track))))))
  (emms-browser-set-filter (assoc "all" emms-browser-filters))
  ;; history
  (emms-history-load)
  ;; libre-fm
  ;; (emms-librefm-scrobbler-enable)
#+end_src
**** config
#+begin_src emacs-lisp
  (setq-default
   emms-source-file-default-directory "/mnt/homeserver/Storage/Music"

   emms-source-playlist-default-format 'm3u
   emms-playlist-mode-center-when-go t
   emms-playlist-default-major-mode 'emms-playlist-mode
   emms-show-format "NP: %s"

   emms-player-list '(emms-player-mpv)
   emms-player-mpv-environment '("PULSE_PROP_media.role=music")
   emms-player[[id:06c97e1e-5602-405b-8434-0ce12c44e03f][Guides]]-mpv-parameters '("--quiet" "--really-quiet" "--no-audio-display" "--force-window=no" "--vo=null"))
#+end_src
**** notifications
#+begin_src emacs-lisp
  ;; choose D-Bus to disseminate messages, if it is running.
  (cond
   ;; test to see if D-Bus notifications are available
   ((if (and (require 'dbus nil t)
             (dbus-ping :session "org.freedesktop.Notifications"))
        (progn
          (setq notify-method 'notify-via-dbus-notifications)
          (require 'notifications))))
   ;; could use the message system otherwise
   (t (setq notify-method 'notify-via-message)))

  (defun notify-via-notifications (title msg icon)
    "Send notification with TITLE, MSG via `D-Bus'."
    (notifications-notify
     :title title
     :body msg
     :app-icon icon
     :urgency 'low))

  (defun notify-via-messages (title msg)
    "Send notification with TITLE, MSG to message."
    (message "APPOINTMENT: %s" msg))

  (defun emms-notifications-dbus (track-name)
    "Share track name via `D-Bus'."
    (let ((icon "/usr/share/icons/breeze-dark/categories/32/applications-multimedia.png"))
      (notify-via-notifications "EMMS is now playing:" track-name icon)))

  (defun emms-notifications-message (track-name)
    "Share track name via Emacs minibuffer."
    (message "EMMS is now playing: %s" track-name))

  (setq emms-player-next-function 'emms-notify-and-next)

  (defun emms-notify-and-next ()
    "Send a notification of track and start next."
    (emms-next-noerror)
    (let ((track-name (emms-track-description (emms-playlist-current-selected-track))))
      (cond
       ((eq notify-method 'notify-via-dbus-notifications)
        (emms-notifications-dbus track-name))
       (t (emms-notifications-message track-name)))))

#+end_src
**** addons
***** helm-emms
#+begin_src emacs-lisp
  (use-package helm-emms :ensure t)
#+end_src
***** org-emms
#+begin_src emacs-lisp
  (use-package org-emms :ensure t)
#+end_src
**** infor from streaming audio mplayer only
#+begin_src emacs-lisp
  (setq  emms-player-mplayer-parameters '("-slave" "-quiet")
         emms-player-mplayer-playlist-parameters '("-slave" "-quiet" "-playlist"))

  (defun mplayer-stream-start-listening ()
    "This emms-player-started-hook checks if the current track is a
  url and the process playing it is mplayer. If it is then the
  output filter mplayer-steam-filter is added to the process"
    (let ((type (emms-track-type (emms-playlist-current-selected-track))))
      (if (or (eq  type 'url) (eq  type 'streamlist))
          (let ((process (get-process emms-player-simple-process-name)))
            (if (string= (car (process-command process)) "mplayer")
                (set-process-filter process 'mplayer-stream-filter))
            ))
      ))

  (add-hook 'emms-player-started-hook 'mplayer-stream-start-listening)
  (defvar emms-mplayer-info-coding-system 'cp1251)
  (defmacro emms-mplayer-info-defreg (symname regexp)
    "Set SYMNAME to be the match for REGEXP."
    `(if (string-match ,regexp string)
         (progn
           (setq ,symname (decode-coding-string (match-string 1 string) emms-mplayer-info-coding-system))
           (if (> (length ,symname) 40)
               (setq ,symname (concat (substring ,symname 0 37) "..."))))
       ))


  (defun mplayer-stream-filter (proc string)
    "Checks mplayer output for ICY Info data. If any is found then the StreamTitle
  option is extracted and written to the track's 'info-title property. Because
  emms-info-track-description -- the function that creates the track name -- needs a
  title *and* an artist 'info-artist is set to the stream title (the one you see in
  emms-streams)."
    (let ((name "")
          (Title "")
          (Artist "")
          (Album "")
          (genre "")
          (bitrate "")
          (nowplaying "")
          (track (emms-playlist-current-selected-track))
          )
      (emms-mplayer-info-defreg name "^Name[ ]*:[ ]*\\(.*\\)\\b[ ]*$") ;;;;describe station
      (emms-mplayer-info-defreg genre "^Genre[ ]*:[ ]*\\(.*\\)\\b[ ]*$") ;;;;describe station
      (emms-mplayer-info-defreg bitrate "^Bitrate[ ]*:[ ]*\\(.*\\)\\b[ ]*$") ;;;;describe station
      (emms-mplayer-info-defreg nowplaying "^ICY Info: StreamTitle='\\(.*\\)'")
      (emms-mplayer-info-defreg Artist "Artist:[ ]*\\(.*\\)\\b[ ]*$\\|^author:[ ]*\\(.*\\)\\b[ ]*$") ;;;;describe artist
      (emms-mplayer-info-defreg Album "Album:[ ]*\\(.*\\)\\b[ ]*$") ;;;;describe artist
      (emms-mplayer-info-defreg Title "Title:[ ]*\\(.*\\)\\b[ ]*$") ;;;;describe artist
      (if (> (length (concat nowplaying Title)) 0)
          (emms-track-set track 'info-title (concat nowplaying Title)))
      (if (> (length (concat name Album)) 0)
          (emms-track-set track 'info-album (concat name Album)))
      (if (> (length Artist) 0)
          (emms-track-set track 'info-artist Artist))
      (if (not (or (emms-track-get track 'info-artist)
                   (emms-track-get track 'info-album)
                   (emms-track-get track 'info-title)))
          (emms-track-set track 'info-album
                          (if (listp (emms-track-get track 'metadata))
                              (car (emms-track-get track 'metadata))
                            "")))
      (emms-track-updated track)
      ))
#+end_src
**** Better track descriptions
#+begin_src emacs-lisp
  (defun fg-emms-track-description (track)
    "Return a somewhat nice track description."
    (let ((artist (emms-track-get track 'info-artist))
          (year (emms-track-get track 'info-year))
          (album (emms-track-get track 'info-album))
          (tracknumber (emms-track-get track 'info-tracknumber))
          (title (emms-track-get track 'info-title)))
      (cond
       ((or artist title)
        (concat (if (> (length artist) 0) artist "Unknown artist") " - "
                (if (> (length year) 0) year "XXXX") " - "
                (if (> (length album) 0) album "Unknown album") " - "
                (if (> (length tracknumber) 0)
                    (format "%02d" (string-to-number tracknumber))
                  "XX") " - "
                (if (> (length title) 0) title "Unknown title")))
       (t
        (emms-track-simple-description track)))))

  (setq emms-track-description-function 'fg-emms-track-description)
#+end_src
*** dired movie player
#+begin_src emacs-lisp
  (defvar dired-mplayer-program "/usr/bin/mplayer")

  (defun dired-mplayer ()
    (interactive)
    (let ((file (expand-file-name (dired-get-filename)))
          ext files basename dir curr-file idx-file sub-file srt-file
          command options)
      (setq basename (file-name-nondirectory
                      (file-name-sans-extension file)))
      (setq dir (file-name-directory file))
      (setq files (directory-files dir t basename))
      (delete file files)
      (while files
        (setq curr-file (car files))
        (if (string= (file-name-extension curr-file) "idx")
            (setq idx-file curr-file))
        (if (string= (file-name-extension curr-file) "sub")
            (setq sub-file curr-file))
        (if (string= (file-name-extension curr-file) "srt")
            (setq srt-file curr-file))
        (setq files (cdr files)))
      (if (and idx-file sub-file)
          (setq options (format "-vobsub \"%s\""
                                (file-name-sans-extension idx-file))))
      (if (and sub-file
               (not idx-file))
          (setq options (format "-sub \"%s\"" sub-file)))
      (if (and srt-file
               (not sub-file))
          (setq options (format "-sub \"%s\"" srt-file)))
      (setq options (format "%s -font \"%s\" -subfont-text-scale 4
  -really-quiet" options "c:\\windows\\fonts\\arial.ttf"))
      (setq command (format "\"%s\" \"%s\" %s" dired-mplayer-program
                            file options))
      (if (y-or-n-p (format "Run command %s?" command))
          (shell-command command))))
#+end_src

** Browsers
*** w3m
**** install
#+begin_src emacs-lisp
  (use-package w3m :ensure t)
  (use-package helm-w3m :ensure t)
#+end_src
** Discord
#+begin_src emacs-lisp
  (use-package elcord :ensure t :init (require 'elcord)(elcord-mode))
#+end_src
** Erc
*** General
Configure ERC
#+begin_src emacs-lisp
  ;; Set our nickname & real-name as constant variables
  (setq
   erc-nick "th3r00t"     ; Our IRC nick
   erc-user-full-name "the master of /") ; Our /whois name

  ;; Define a function to connect to a server

  (defun t3/irc/anon ()
    (interactive)
    (erc-tls :server "irc.anonops.com":port "6697" :nick "lucidanonymity" :full-name "the master of /" :password "A!ec4597778"))
  (defun t3/irc/freenode ()
    (interactive)
    (erc-tls :server "irc.freenode.net":port "6697" :nick "th3r00t" :full-name "the master of /" :password "b2edxfrr1"))
  ;; Or assign it to a keybinding
  ;; This example is also using erc's TLS capabilities:
  (setq erc-prompt (lambda () (concat "[" (buffer-name) "]")))
  ;; allow some channels to not auto-delay messages. This can probably
  ;; get you kicked from some channels, so don't use it.
  (add-hook 'erc-mode-hook
            (lambda ()
              (let ((floodable-buffers
                     '(;; every channel in this list is floodable:
                       "#bugfunk"
                       )))
                (when (member (buffer-name) floodable-buffers)
                  (make-local-variable 'erc-server-flood-penalty)
                  (setq erc-server-flood-penalty 0)))))
  (defun my/make-buffer-floodable ()
    (make-local-variable 'erc-server-flood-penalty)
    (setq erc-server-flood-penalty 0))
  (setq erc-join-buffer 'bury)
  (setq erc-button-url-regexp
        "\\([-a-zA-Z0-9_=!?#$@~`%&*+\\/:;,]+\\.\\)+[-a-zA-Z0-9_=!?#$@~`%&*+\\/:;,]*[-a-zA-Z0-9\\/]")
  (defvar erc-responded-once nil)
  (defvar erc-away-reason nil)
  (defun erc-respond-once-if-away (match-type nickuserhost msg)
    (if (erc-away-time)
        (if (eq match-type 'current-nick)
            (unless erc-responded-once
              (erc-send-action (erc-default-target) (concat "is away: " erc-away-reason))
              (setq erc-responded-once t)))))
  (add-hook 'erc-text-matched-hook 'erc-respond-once-if-away)

  (defadvice erc-process-away (after erc-away-reason-clear (proc away-p) activate)
    "Clear things"
    (unless away-p
      (setq erc-responded-once nil
            erc-away-reason nil)))

  (defadvice erc-cmd-AWAY (after erc-store-reason (line) activate)
    "store line"
    (when (string-match "^\\s-*\\(.*\\)$" line)
      (let ((reason (match-string 1 line)))
        (setq erc-away-reason reason))))
          ;;; Frame-related function from rcircDbusNotification

  (defun fsm-x-active-window ()
    "Return the window ID of the current active window in X, as
      given by the _NET_ACTIVE_WINDOW of the root window set by the
      window-manager, or nil if not able to"
    (if (eq (window-system) 'x)
        (let ((x-active-window (x-window-property "_NET_ACTIVE_WINDOW" nil "WINDOW" 0 nil t)))
          (string-to-number (format "%x00%x" (car x-active-window) (cdr x-active-window))
                            16))
      nil))

  (defun fsm-frame-outer-window-id (frame)
    "Return the frame outer-window-id property, or nil if FRAME not of the correct type"
    (if (framep frame)
        (string-to-number
         (frame-parameter frame 'outer-window-id))
      nil))


  (defun fsm-frame-x-active-window-p (frame)
    "Check if FRAME is is the X active windows
      Returns t if frame has focus or nil if"
    (if (framep frame)
        (progn
          (if (eq (fsm-frame-outer-window-id frame)
                  (fsm-x-active-window))
              t
            nil))
      nil))

  (require 'ivy)
  (require 'erc)

  (define-minor-mode ivy-erc
    "Add some useful functionality to the default racket-mode."
    :lighter " ivy-erc"
    :keymap (make-sparse-keymap))

  (defun ivy-erc-switch-buffer (&optional arg)
    "Switch open erc buffer with ivy completion."
    (interactive)
    (let ((proc (unless arg erc-server-process)))
      (ivy-read "IRC channel: "
                (mapcar 'buffer-name
                        (erc-buffer-filter
                         (let ((buf (current-buffer)))
                           (lambda ()
                             (not (eq buf (current-buffer)))))
                         proc))
                :action 'switch-to-buffer
                :require-match t
                :caller 'ivy-erc-switch-buffer)))


  (provide 'ivy-erc)
  (use-package erc-hl-nicks :ensure t)
#+end_src


*** ERC Auto Joins
#+begin_src emacs-lisp
  (require 'erc-join)
  (erc-autojoin-mode 1)
  (setq erc-autojoin-channels-alist
        '(("freenode.net" "#emacs" "#archlinux" "#python" "#linux" "#selfhosted")
          ("anonops.com" "#python" "#linux" "#anonops" "#bots" "#networking" "#programmers" "#OpSec" "#hackers" "#blackhats" "#radioanonops")))
  
#+end_src
*** ERC Logging
#+begin_src emacs-lisp
  (setq erc-log-channels-directory "~/.emacs.d/.erc/logs/")
  (setq erc-save-buffer-on-part t)
  (setq erc-log-write-after-send t)
  (setq erc-log-write-after-insert t)
  (setq erc-log-matches-types-alist
        '((current-nick . "YOUR_NICK")
          (keyword . "KEYWORD")
          (channel . "JOIN/PART/QUIT")
          (nick . "NICK CHANGE")
          (mode . "MODE changes")
          (ctcp . "CTCP queries")
          (notice . "NOTICE messages")
          (kill . "KILL messages")
          (other . "MISC messages")))
  (setq erc-log-matches t)
  (setq erc-log-insert-log-on-open t)
  (setq erc-log-file-coding-system 'utf-8)
  (setq erc-log-file-coding-system 'utf-8)
  (setq erc-log-write-after-send t)
  (setq erc-log-write-after-insert t)
  (setq erc-log-matches-types-alist
        '((current-nick . "YOUR_NICK")
          (keyword . "KEYWORD")
          (channel . "JOIN/PART/QUIT")
          (nick . "NICK CHANGE")
          (mode . "MODE changes")
          (ctcp . "CTCP queries")
          (notice . "NOTICE messages")
          (kill . "KILL messages")
          (other . "MISC messages")))
  (setq erc-log-matches t)
  (setq erc-log-insert-log-on-open t)
  (setq erc-log-file-coding-system 'utf-8)

  (defun t3/erc-log-matches (match-type nick message)
    "Log matches to a file."
    (let ((erc-log-channels-directory "~/.emacs.d/.erc/logs/"))
      (erc-log-matches match-type nick message)))
  (add-hook 'erc-text-matched-hook 't3/erc-log-matches)
#+end_src

*** ERC Session Management
#+begin_src emacs-lisp
  (setq erc-max-buffer-size 20000)
  (defvar erc-insert-post-hook)
  (add-hook 'erc-insert-post-hook 'erc-truncate-buffer)
  (setq erc-truncate-buffer-on-save t)


  ;; Clears out annoying erc-track-mode stuff for when we don't care.
  ;; Useful for when ChanServ restarts :P
  (defun reset-erc-track-mode ()
    (interactive)
    (setq erc-modified-channels-alist nil)
    (erc-modified-channels-update))
#+end_src

: reset-erc-track-mode

** Enable Theme
#+begin_src emacs-lisp
  ;; (load-theme 'doom-tokyo-night t)
  (load-theme 'doom-tokyo-night t)
#+end_src

: t

** Copilot
#+begin_src emacs-lisp
  (use-package copilot
    :straight (:host github :repo "zerolfx/copilot.el"
                     :files ("dist" "copilot.el"))
    :ensure t)

  (add-hook 'prog-mode-hook 'copilot-mode)
  (add-hook 'org-mode-hook 'copilot-mode)

  (customize-set-variable 'copilot-enable-predicates '(evil-insert-state-p))

                                          ; complete by copilot first, then company-mode
  (defun my-tab ()
    (interactive)
    (or (copilot-accept-completion)
        (company-indent-or-complete-common nil)))

                                          ; modify company-mode behaviors
  (with-eval-after-load 'company
                                          ; disable inline previews
    (delq 'company-preview-if-just-one-frontend company-frontends)
                                          ; enable tab completion
    (define-key company-mode-map (kbd "<tab>") 'my-tab)
    (define-key company-mode-map (kbd "TAB") 'my-tab)
    (define-key company-active-map (kbd "<tab>") 'my-tab)
    (define-key company-active-map (kbd "TAB") 'my-tab))
#+end_src

* Testing Configs
#+begin_src emacs-lisp
  (use-package helm-system-packages :ensure t)
  (use-package docker
    :ensure t
    :bind ("C-c d" . docker))
#+end_src
** Auto Insert Mode
*** C++
#+begin_src emacs-lisp
  (eval-after-load 'autoinsert
    '(define-auto-insert
       '("\\.\\(CC?\\|cc\\|cxx\\|cpp\\|c++\\)\\'" . "C++ skeleton")
       '("Short description: "
         "/*" \n
         (file-name-nondirectory (buffer-file-name))
         " -- " str \n
         " */" > \n \n
         "#include <iostream>" \n \n
         "using namespace std;" \n \n
         "main()" \n
         "{" \n
         > _ \n
         "}" > \n)))
#+end_src
*** C
#+begin_src emacs-lisp
  (eval-after-load 'autoinsert
    '(define-auto-insert '("\\.c\\'" . "C skeleton")
       '(
         "Short description: "
         "/**\n * "
         (file-name-nondirectory (buffer-file-name))
         " -- " str \n
         " *" \n
         " * Written on " (format-time-string "%A, %e %B %Y.") \n
         " */" > \n \n
         "#include <stdio.h>" \n
         "#include \""
         (file-name-sans-extension
          (file-name-nondirectory (buffer-file-name)))
         ".h\"" \n \n
         "int main()" \n
         "{" > \n
         > _ \n
         "}" > \n)))
#+end_src
*** Perl
#+begin_src emacs-lisp
  (eval-after-load 'autoinsert
    '(define-auto-insert '(perl-mode . "Perl skeleton")
       '("Description: "
         "#!/usr/bin/env perl" \n
         \n
         "use strict;" \n
         "use warnings;" \n \n
         _ \n \n
         "__END__" "\n\n"
         "=head1 NAME" "\n\n"
         str "\n\n"
         "=head1 SYNOPSIS" "\n\n\n"
         "=head1 DESCRIPTION" "\n\n\n"
         "=head1 COPYRIGHT" "\n\n"
         "Copyright (c) " (substring (current-time-string) -4) " "
         (getenv "ORGANIZATION") | (progn user-full-name) "\n\n"
         "This library is free software; you can redistribute it and/or" "\n"
         "modify it under the same terms as Perl itself." "\n\n"
         "=cut" "\n")))
#+end_src
** Python
#+begin_src emacs-lisp :tangle no
  (use-package pyenv-mode :ensure t)
  (pyenv-mode)
#+end_src
** 

** 

* 

* Custom Functions
*** Org goto project todo
#+begin_src emacs-lisp
  (defun my/org-projectile-goto-project-file ()
    "Open the TODO.org file for the current project."
    (interactive)
    (org-projectile-goto-location-for-project (projectile-project-name)))
#+end_src
*** org-roam-node-insert-immediate
#+begin_src emacs-lisp
  (defun org-roam-node-insert-immediate (arg &rest args)
    (interactive "P")
    (let ((args (cons arg args))
          (org-roam-capture-template (list (append (car org-roam-capture-templates)'(:immediate-finish t)))))
      (apply #'org-roam-node-insert args)))
#+end_src
*** Reload Config
#+begin_src emacs-lisp
  (defun reload-config ()
    (interactive)
    (load-file "~/.emacs.d/init.el"))
#+end_src
*** BUG Sudo Find File
#+begin_src emacs-lisp
  (defun sudo-find-file (file-name)
    (interactive "Sudo Find File: ")
    (let ((tramp-file-name (concat "/sudo::" (expand-file-name file-name))))
      (find-file tramp-file-name)))
#+end_src
*** Reload Config
#+begin_src emacs-lisp
  (defun reconfigure-emacs ()
    (org-babel-load-file (expand-file-name "config.org" user-emacs-directory))
    )
#+end_src

*** Kill Journal Buffer
#+begin_src emacs-lisp
#+end_src
*** helm/functions
**** helm/eselect-grep
#+begin_src emacs-lisp
  (defun helm/eselect-grep ()
    (interactive)
    (when (y-or-n-p (format "Current grep program is %s, switching? "
                            (helm-grep-command)))
      (if (helm-grep-use-ack-p)
          (setq helm-grep-default-command
                "grep --color=always -d skip %e -n%cH -e %p %f"
                helm-grep-default-recurse-command
                "grep --color=always -d recurse %e -n%cH -e %p %f")
        (setq helm-grep-default-command
              "ack-grep -Hn --color --smart-case --no-group %e %p %f"
              helm-grep-default-recurse-command
              "ack-grep -H --color --smart-case --no-group %e %p %f"))
      (message "Switched to %s" (helm-grep-command))))

#+end_src
**** helm/turn-on-header-line
#+begin_src emacs-lisp
  (defun helm/turn-on-header-line ()
    (interactive)
    (setq helm-echo-input-in-header-line t)
    (setq helm-split-window-in-side-p t)
    (helm-autoresize-mode -1)
    (add-hook 'helm-minibuffer-set-up-hook 'helm-hide-minibuffer-maybe)
    )
#+end_src
**** helm/turn-off-header-line
#+begin_src emacs-lisp
  (defun helm/turn-off-header-line ()
    (interactive)
    (setq helm-echo-input-in-header-line nil)
    ;;(helm-autoresize-mode 1)
    (setq helm-split-window-in-side-p nil)
    (remove-hook 'helm-minibuffer-set-up-hook 'helm-hide-minibuffer-maybe)
    )
#+end_src
**** helm/occur-which-func
#+begin_src emacs-lisp
  (defun helm/occur-which-func ()
    (interactive)
    (with-current-buffer
        (or (helm-aif (with-helm-buffer
                        (window-buffer helm-persistent-action-display-window))
                (and (null (minibufferp it)) it))
            helm-current-buffer)
      (when (eq major-mode 'emacs-lisp-mode)
        (message "[%s]" (which-function)))))
#+end_src
**** helm-find-files-in-frame
(defun helm-find-files-in-frame ()
(interactive)
(with-helm-in-frame
(call-interactively #'helm-find-files)))
**** helm-M-x-in-frame
#+begin_src emacs-lisp
  (defun helm-M-x-in-frame ()
    (interactive)
    (with-helm-in-frame
      (call-interactively #'helm-M-x)))
#+end_src
**** helm-occur-in-frame
#+begin_src emacs-lisp
  (defun helm-occur-in-frame ()
    (interactive)
    (with-helm-in-frame
      (call-interactively #'helm-occur)))
#+end_src
**** helm-mini-in-frame
#+begin_src emacs-lisp
  (defun helm-mini-in-frame ()
    (interactive)
    (with-helm-in-frame
      (call-interactively #'helm-mini)))
#+end_src
**** helm-do-grep-ag-in-frame
#+begin_src emacs-lisp
  (defun helm-do-grep-ag-in-frame ()
    (interactive)
    (with-helm-in-frame
      (call-interactively #'helm-do-grep-ag)))
#+end_src
**** helm-do-git-grep-in-frame
#+begin_src emacs-lisp
  (defun helm-do-git-grep-in-frame ()
    (interactive)
    (with-helm-in-frame
      (call-interactively #'helm-grep-do-git-grep)))
#+end_src
**** helm-imenu-in-frame
#+begin_src emacs-lisp
  (defun helm-imenu-in-frame ()
    (interactive)
    (with-helm-in-frame
      (call-interactively #'helm-imenu)))
#+end_src
**** helm-top-in-frame
#+begin_src emacs-lisp
  (defun helm-top-in-frame ()
    (interactive)
    (with-helm-in-frame
      (call-interactively #'helm-top)))
#+end_src
**** helm/zsh-history
#+begin_src emacs-lisp
  (defun helm/zsh-history ()
    (interactive)
    (helm :sources (helm-build-in-file-source "Zsh history" "~/.zsh_history"
                     :action '(("Kill new" . kill-new)
                               ("Send command to Tmux" . emamux:send-command)))
          :buffer "*helm zsh history*"))
#+end_src
#+begin_src emacs-lisp
  (defun helm-zgrep-recursive (&optional directory)
    (interactive)
    (helm-ff-zgrep-1 (list (or directory default-directory)) t))
#+end_src
*** w3m-open-link-or-image-in-chromium
(defun w3m-open-link-or-image-in-chromium ()
"Open the current link or image in Firefox."
(interactive)
(let ((url (or (w3m-anchor) (w3m-image))))
(if (string-match "youtube" url)
(let ((track (emms-track 'url url)))
(emms-track-set track 'info-title (substring  (shell-command-to-string (concat "youtube-dl -e " url)) 0 -1))
(with-current-emms-playlist
(emms-playlist-insert-track track)))
(browse-url-generic url))))
(define-key w3m-mode-map "z" 'w3m-open-link-or-image-in-chromium)
*** insert-date
#+begin_src emacs-lisp
  (defun insert-date (prefix)
    "Insert the current date. With prefix-argument, use ISO format. With
   two prefix arguments, write out the day and month name."
    (interactive "P")
    (let ((format (cond
                   ((not prefix) "%d.%m.%Y")
                   ((equal prefix '(4)) "%Y-%m-%d")
                   ((equal prefix '(16)) "%A, %d. %B %Y")))
          (system-time-locale "en_US"))
      (insert (format-time-string format))))
#+end_src
*** About Emacs
#+begin_src emacs-lisp
  (defhydra my/hydra-about-emacs ()
    "
  About Emacs                                                        [_q_] quit
  ^^---------------------------------------------------------------------------
           PID:    %s(emacs-pid)
        Uptime:    %s(emacs-uptime)
     Init time:    %s(emacs-init-time)
     Directory:    %s(identity user-emacs-directory)
  Invoked from:    %s(concat invocation-directory invocation-name)
       Version:    %s(identity emacs-version)

  User Info
  ^^---------------------------------------------------------------------------
     User name:    %s(user-full-name)
  Login (real):    %s(user-login-name) (%s(user-real-login-name))
    UID (real):    %s(user-uid) (%s(user-real-uid))
    GID (real):    %s(group-gid) (%s(group-real-gid))
  Mail address:    %s(identity user-mail-address)
  "
    ("q" nil nil))

  (global-set-key (kbd "C-h C-a") #'my/hydra-about-emacs/body)
#+end_src
*** System Info
#+begin_src emacs-lisp
  (defhydra hydra-system-info ()
    "
  System Info                                                        [_q_] quit
  ^^---------------------------------------------------------------------------
      System name:    %s(system-name)
      System type:    %s(identity system-type)
    System config:    %s(identity system-configuration)

  Memory
  ^^---------------------------------------------------------------------------
             Used:    %s(format \"%0.0f percent\"
                                (* 100 (- 1 (/ (cl-second (memory-info))
                                               (float (cl-first (memory-info)))))))
         Free RAM:    %s(format \"%0.1f GB (of %0.1f GB)\"
                                (/ (float (cl-second (memory-info))) 1048576)
                                (/ (float (cl-first (memory-info))) 1048576))
        Free swap:    %s(format \"%0.1f GB (of %0.1f GB)\"
                                (/ (float (cl-fourth (memory-info))) 1048576)
                                (/ (float (cl-third (memory-info))) 1048576))
      Pure memory:    %s(format \"%0.1f GB\" (/ (float pure-bytes-used) 1048576))

  Garbage Collection
  ^^---------------------------------------------------------------------------
         GCs done:    %`gcs-done
      GCs elapsed:    %s(format-seconds \"%M, %S\" gc-elapsed)
   Cons threshold:    %`gc-cons-threshold
  Cons percentage:    %`gc-cons-percentage
  "
    ("q" nil nil))

  (global-set-key (kbd "C-h C-s") #'hydra-system-info/body)
#+end_src
*** web-mode hooks
#+begin_src emacs-lisp
  (defun my-web-mode-hook ()
    "Hooks for Web mode."
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-enable-auto-pairing t)
    (setq web-mode-enable-css-colorization t)
    (setq web-mode-enable-current-element-highlight t)
    (setq web-mode-enable-current-column-highlight t)
    (setq web-mode-enable-auto-closing t)
    (setq web-mode-enable-auto-opening t)
    (setq web-mode-enable-auto-indentation t)
    (setq web-mode-enable-auto-quoting t)
    (setq web-mode-enable-auto-expanding t)
    (setq web-mode-enable-comment-interpolation t)
    )
  (add-hook 'web-mode-hook  'my-web-mode-hook)
#+end_src
* Org Mode Hooks
#+begin_src emacs-lisp
  (eval-after-load "org"
    '(require 'ox-gfm nil t))
  
#+end_src

